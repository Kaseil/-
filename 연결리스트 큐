#include <iostream>
#include <string>
using namespace std;

//계수와 차수에 관한 구조체
struct funNum {
	int coeNum, degNum;

	//생성자
	funNum(int coe, int deg) {
		coeNum = coe;
		degNum = deg;
	}

};

//계수와 차수를 저장하는 노드
class Node : public funNum {
	Node* link;
public:
	Node(int coe = 0, int deg = 0) : funNum(coe, deg) { link = NULL; }
	~Node() {}

	Node* getLink() { return link; }
	void setLink(Node* newLink) { link = newLink; }

};

//노드를 큐로 구현
class linkedQueue {
	Node* front, * rear;
public:
	linkedQueue() { front = rear = NULL; }
	~linkedQueue() { while (!isEmpty()) delete pop(); }

	bool isEmpty() { return front == NULL; }

	void push(Node* newLink) {
		if (isEmpty()) { front = rear = newLink; }
		else {
			rear->setLink(newLink);
			rear = newLink;
		}
	}
	Node* pop() {
		if (isEmpty()) return NULL;
		Node* newLink = front;
		front = front->getLink();
		if (front == NULL) rear = NULL;
		return newLink;
	}
	Node* peek() { return front; }
};

//입력된 값을 토대로 문자열을 만드는 함수
void makingStr(string& str, int coe, int deg) {
	//받은 숫자를 문자열 형태로 전환하고 소숫점 추가
	string tempstr1 = to_string(coe);
	string tempstr2 = to_string(deg);
	tempstr1 += ".0";

	str += tempstr1;
	str += " x^";
	str += tempstr2;

}

//세개의 큐 구현 두개는 입력된 값 저장 하나는 두개 더한값 저장
linkedQueue fx1;
linkedQueue fx2;
linkedQueue sumFx;

int main() {
	//항갯수 입력용차수,계수 선언;
	int n1, n2, n3 = 0;
	int coe, deg;
	//문자열에 저장해서 출력하기위해 문자열 선언
	string fx1Str, fx2Str, sumFxStr;

	//첫번째 수식의 항 갯수 입력 동시에 문자열 만들기
	cin >> n1;
	for (int i = 0; i < n1; i++) {
		//차수 계수 차례대로 받기
		cin >> coe >> deg;
		//큐에 차수과 계수 넣기
		fx1.push(new Node(coe, deg));
		//문자열 기입
		makingStr(fx1Str, coe, deg);
		//더하기 부호 넣기
		if (i != n1 - 1) { fx1Str += " + "; }
	}
	//두번째 수식의 항 갯수 입력
	cin >> n2;
	for (int i = 0; i < n2; i++) {
		//차수 계수 차례대로 받기
		cin >> coe >> deg;
		//큐에 차수과 계수 넣기
		fx2.push(new Node(coe, deg));
		//문자열 기입
		makingStr(fx2Str, coe, deg);
		//더하기 부호 넣기
		if (i != n2 - 1) { fx2Str += " + "; }
	}

	//두 수식을 더하는 과정
	//연산 과정을 위한 임시 노드 두개 생성,구조적인 문제로 노드에 값저장과 큐에 추가 노드 저장 후 반복문 진입
	Node* tempnode1 = fx1.pop();
	Node* tempnode2 = fx2.pop();
	fx1.push(new Node(0, -99));
	fx2.push(new Node(0, -99));
	// 두 큐가 하나라도 들어있으면 계속 진행
	while (!fx1.isEmpty() || !fx2.isEmpty()) {
		//계수의 크기가 큰경우 작은경우 같은경우로 나뉘어서 진행
		if (tempnode1->degNum > tempnode2->degNum) {
			sumFx.push(new Node(tempnode1->coeNum, tempnode1->degNum));
			tempnode1 = fx1.pop();
			n3++;
		}
	else if (tempnode1->degNum < tempnode2->degNum) {
			sumFx.push(new Node(tempnode2->coeNum, tempnode2->degNum));
			tempnode2 = fx2.pop();
			n3++;
		}
	else  {
			sumFx.push(new Node(tempnode1->coeNum + tempnode2->coeNum, tempnode1->degNum));
			tempnode1 = fx1.pop();
			tempnode2 = fx2.pop();
			n3++;
		}
	}

	//더한값들 문자열로 만들기
	for (int i = 0; i < n3; i++) {
		Node* tempnode = sumFx.pop();
		makingStr(sumFxStr, tempnode->coeNum, tempnode->degNum);
		//더하기 부호 넣기
		if (i != n3 - 1) { sumFxStr += " + "; }
	}

	//출력부
	printf("(%d) = ", n1);
	cout << fx1Str << endl;
	printf("(%d) = ", n2);
	cout << fx2Str << endl;
	printf("(%d) = ", n3);
	cout << sumFxStr << endl;

	return 0;
}

